// This is your Prisma schema file with optimizations for performance and scalability

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Changed to PostgreSQL for better scalability
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String
  password     String
  refreshToken String?
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? // Soft delete

  // Relations
  ownedWorkspaces    Workspace[]           @relation("WorkspaceOwner")
  workspaces         UserWorkspace[]
  projectMemberships ProjectMember[]
  assignedTasks      Task[]                @relation("AssignedTasks")
  reportedTasks      Task[]                @relation("ReportedTasks")
  reviewedTasks      Task[]                @relation("TaskReviewers")
  dailyStandups      DailyStandup[]
  timeEntries        TimeEntry[]
  comments           Comment[]
  notifications      Notification[]
  activityLogs       AuditLog[]
  sentInvites        WorkspaceInvitation[] @relation("InviteSender")
  createdProjects    Project[]             @relation("CreatedProjects")

  @@index([email])
  @@index([isActive])
}

model Workspace {
  id          String    @id @default(uuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  settings    Json? // Workspace-specific settings
  icon        String? // URL to workspace icon
  banner      String? // URL to workspace banner image
  logo        String? // URL to workspace logo
  theme       Json? // Theme settings including colors, fonts, etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Soft delete
  ownerId     String

  // Relations
  owner        User                  @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members      UserWorkspace[]
  projects     Project[]
  customFields CustomField[]
  invitations  WorkspaceInvitation[]

  @@unique([name, ownerId])
  @@index([ownerId])
  @@index([isActive])
}

model UserWorkspace {
  id          String        @id @default(uuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
  @@index([userId])
  @@index([workspaceId])
  @@index([role])
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model Project {
  id            String          @id @default(uuid())
  name          String
  description   String?
  workspaceId   String
  status        ProjectStatus   @default(ACTIVE)
  key           String // Project key for task references (e.g., "PROJ")
  isPublic      Boolean         @default(false)
  backgroundColor String?
  icon          String? // Project icon URL
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime? // Soft delete
  createdById   String?

  // Relations
  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  createdBy     User?          @relation("CreatedProjects", fields: [createdById], references: [id])
  sprints       Sprint[]
  tasks         Task[]
  members       ProjectMember[]
  labels        Label[]
  customFields  CustomField[]
  taskTemplates TaskTemplate[]

  @@unique([workspaceId, key])
  @@index([workspaceId])
  @@index([status])
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
  ON_HOLD
}

model ProjectMember {
  id        String      @id @default(uuid())
  userId    String
  projectId String
  role      ProjectRole @default(MEMBER)
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@index([role])
}

enum ProjectRole {
  MANAGER
  LEAD
  MEMBER
  VIEWER
}

model Sprint {
  id          String       @id @default(cuid())
  name        String
  projectId   String
  goal        String?      @db.Text
  startDate   DateTime
  endDate     DateTime
  status      SprintStatus @default(PLANNING)
  position    Float        @default(0)
  storyPoints Int         @default(0)    // Total Story Points in Sprint
  velocity    Float?                     // Team velocity
  burndownData Json?                     // Burndown Chart data
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  // Relations
  project     Project      @relation(fields: [projectId], references: [id])
  tasks       Task[]
  retrospective SprintRetrospective?
  dailyStandups DailyStandup[]
  metrics      SprintMetrics?

  @@index([projectId])
  @@index([status])
  @@index([startDate, endDate])
}

model SprintRetrospective {
  id            String    @id @default(cuid())
  sprintId      String    @unique
  whatWentWell  String[]  // What went well
  whatWentWrong String[]  // What needs improvement
  actionItems   String[]  // Action items for next sprint
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sprint        Sprint    @relation(fields: [sprintId], references: [id])

  @@index([sprintId])
}

model DailyStandup {
  id          String    @id @default(cuid())
  sprintId    String
  userId      String
  date        DateTime
  yesterday   String    // What was done yesterday
  today       String    // What will be done today
  blockers    String?   // Any blockers
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  sprint      Sprint    @relation(fields: [sprintId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([sprintId, userId, date])
  @@index([sprintId])
  @@index([userId])
  @@index([date])
}

model SprintMetrics {
  id                   String    @id @default(cuid())
  sprintId             String    @unique
  plannedStoryPoints   Int
  completedStoryPoints Int
  actualVelocity       Float
  burndownData         Json      // Daily burndown chart data
  startDate            DateTime
  endDate              DateTime
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  sprint               Sprint    @relation(fields: [sprintId], references: [id])

  @@index([sprintId])
}

enum SprintStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

model Task {
  id          String    @id @default(cuid())
  taskNumber  Int
  title       String
  description String?   @db.Text
  priority    Priority  @default(MEDIUM)
  status      TaskStatus @default(TODO)
  startDate   DateTime?
  dueDate     DateTime?
  storyPoints Int       @default(0)    // Story Points estimation
  acceptanceCriteria String[]          // Definition of Done
  reviewStatus ReviewStatus?           // Code Review status
  reviewerId   String?                 // Reviewer ID
  documentationUrl String?             // Link to documentation
  timeEstimate Int?     // in minutes
  timeSpent   Int?      // in minutes
  position    Float     // for ordering in kanban/list views
  isBlocked   Boolean   @default(false)
  blockReason String?   @db.Text

  // Relations
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  sprintId    String?
  sprint      Sprint?   @relation(fields: [sprintId], references: [id])
  assigneeId  String?
  assignee    User?     @relation("AssignedTasks", fields: [assigneeId], references: [id])
  reporterId  String
  reporter    User      @relation("ReportedTasks", fields: [reporterId], references: [id])
  reviewer    User?     @relation("TaskReviewers", fields: [reviewerId], references: [id])
  parentTaskId String?
  parentTask  Task?     @relation("SubTasks", fields: [parentTaskId], references: [id])
  subtasks    Task[]    @relation("SubTasks")
  labels      Label[]
  comments    Comment[]
  timeEntries TimeEntry[]
  customFieldValues CustomFieldValue[]
  dependencies TaskDependency[] @relation("TaskDependencies")
  dependents  TaskDependency[] @relation("DependsOn")
  attachments Attachment[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@unique([projectId, taskNumber])
  @@index([sprintId])
  @@index([assigneeId])
  @@index([reporterId])
  @@index([reviewerId])
  @@index([parentTaskId])
  @@index([status])
  @@index([priority])
  @@index([startDate])
  @@index([dueDate])
}

model TaskDependency {
  id          String         @id @default(uuid())
  taskId      String // Task that depends on another
  dependsOnId String // Task that is depended upon
  type        DependencyType @default(BLOCKS)

  // Relations
  task      Task @relation("TaskDependencies", fields: [taskId], references: [id])
  dependsOn Task @relation("DependsOn", fields: [dependsOnId], references: [id])

  @@unique([taskId, dependsOnId])
  @@index([taskId])
  @@index([dependsOnId])
}

enum DependencyType {
  BLOCKS
  RELATES_TO
  DUPLICATES
  FOLLOWS
}

model TaskTemplate {
  id          String   @id @default(uuid())
  name        String
  projectId   String
  title       String
  description String?
  priority    Priority @default(MEDIUM)
  labels      Label[]

  // Relations
  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
  BLOCKED
}

enum Priority {
  LOWEST
  LOW
  MEDIUM
  HIGH
  HIGHEST
}

model Label {
  id          String  @id @default(uuid())
  name        String
  color       String
  description String?
  projectId   String

  // Relations
  tasks     Task[]
  project   Project        @relation(fields: [projectId], references: [id])
  templates TaskTemplate[]

  @@unique([name, projectId])
  @@index([projectId])
}

model TimeEntry {
  id          String    @id @default(uuid())
  taskId      String
  userId      String
  startTime   DateTime
  endTime     DateTime?
  description String?
  billable    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([startTime, endTime])
}

model Comment {
  id        String    @id @default(uuid())
  content   String    @db.Text
  taskId    String
  userId    String
  parentId  String? // For comment replies
  isEdited  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  // Relations
  task    Task      @relation(fields: [taskId], references: [id])
  user    User      @relation(fields: [userId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@index([taskId])
  @@index([userId])
}

model CustomField {
  id          String  @id @default(uuid())
  name        String
  type        String // TEXT, NUMBER, DATE, SELECT, etc.
  options     Json? // For SELECT type fields
  required    Boolean @default(false)
  projectId   String?
  workspaceId String? // If null, project-specific

  // Relations
  project   Project?           @relation(fields: [projectId], references: [id])
  workspace Workspace?         @relation(fields: [workspaceId], references: [id])
  values    CustomFieldValue[]

  @@index([projectId])
  @@index([workspaceId])
}

model CustomFieldValue {
  id            String @id @default(uuid())
  value         String // Stored as string, converted based on type
  customFieldId String
  taskId        String

  // Relations
  customField CustomField @relation(fields: [customFieldId], references: [id])
  task        Task        @relation(fields: [taskId], references: [id])

  @@unique([customFieldId, taskId])
  @@index([customFieldId])
  @@index([taskId])
}

model Attachment {
  id         String   @id @default(uuid())
  filename   String
  url        String
  size       Int
  mimeType   String
  taskId     String
  uploaderId String
  createdAt  DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id])

  @@index([taskId])
}

model AuditLog {
  id         String   @id @default(uuid())
  entityType String // Task, Project, etc.
  entityId   String
  action     String // CREATE, UPDATE, DELETE
  userId     String
  changes    Json // Before/After changes
  createdAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
}

model Notification {
  id        String   @id @default(uuid())
  type      String // MENTION, ASSIGNMENT, etc.
  userId    String
  title     String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model WorkspaceInvitation {
  id        String        @id @default(uuid())
  email     String
  role      WorkspaceRole @default(MEMBER)
  token     String        @unique
  status    InviteStatus  @default(PENDING)
  expiresAt DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  inviter     User      @relation("InviteSender", fields: [inviterId], references: [id])
  inviterId   String

  @@index([workspaceId])
  @@index([inviterId])
  @@index([token])
  @@index([status])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ReviewStatus {
  PENDING
  IN_REVIEW
  APPROVED
  CHANGES_REQUESTED
}
